% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/core_voxelfit_engine.R, R/core_voxelwise_fit.R
\name{solve_glm_for_gamma_core}
\alias{solve_glm_for_gamma_core}
\title{Solve GLM for gamma coefficients}
\usage{
solve_glm_for_gamma_core(
  Z_list_of_matrices,
  Y_proj_matrix,
  lambda_gamma,
  orthogonal_approx_flag = FALSE
)

solve_glm_for_gamma_core(
  Z_list_of_matrices,
  Y_proj_matrix,
  lambda_gamma,
  orthogonal_approx_flag = FALSE
)
}
\arguments{
\item{Z_list_of_matrices}{List of k design matrices in manifold basis (n x m each),
where n is timepoints, m is manifold dimensions, and k is number of conditions}

\item{Y_proj_matrix}{The n x V projected data matrix, where V is number of voxels}

\item{lambda_gamma}{Ridge penalty parameter (scalar, typically small like 0.01)}

\item{orthogonal_approx_flag}{Boolean for orthogonal approximation. If TRUE,
zeros out off-diagonal blocks in the design matrix cross-product, treating
conditions as approximately orthogonal.}
}
\value{
(k*m) x V matrix of gamma coefficients

Gamma_coeffs_matrix A (km) x V matrix of gamma coefficients, where
rows are organized as condition1_dim1, ..., condition1_dimM,
condition2_dim1, ..., condition2_dimM, etc.
}
\description{
Solves the GLM to estimate gamma coefficients for all voxels simultaneously.
}
\details{
This function implements Component 1, Step 3 of the M-HRF-LSS pipeline.
It combines all condition design matrices into a single large design matrix
and solves the ridge regression problem for all voxels at once. The optional
orthogonal approximation can improve computational efficiency and stability
when conditions are expected to be relatively independent.
}
\examples{
\dontrun{
# Create example data
n <- 200  # timepoints
m <- 5    # manifold dimensions
k <- 3    # conditions
V <- 100  # voxels

# Design matrices in manifold basis
Z_list <- lapply(1:k, function(i) matrix(rnorm(n * m), n, m))
Y_proj <- matrix(rnorm(n * V), n, V)

# Solve GLM
gamma <- solve_glm_for_gamma_core(Z_list, Y_proj, lambda_gamma = 0.01)
# gamma is (k*m) x V
}

}
