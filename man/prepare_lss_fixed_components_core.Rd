% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/core_lss.R
\name{prepare_lss_fixed_components_core}
\alias{prepare_lss_fixed_components_core}
\title{Prepare LSS Fixed Components (Core)}
\usage{
prepare_lss_fixed_components_core(
  A_lss_fixed_matrix,
  intercept_col_index_in_Alss = NULL,
  lambda_ridge_Alss = 0
)
}
\arguments{
\item{A_lss_fixed_matrix}{An n x q_lss matrix of fixed regressors (e.g.,
intercept, drift terms, nuisance regressors), where n is timepoints and
q_lss is number of fixed regressors}

\item{intercept_col_index_in_Alss}{Integer index of the intercept column in
A_lss_fixed_matrix, or NULL if no intercept}

\item{lambda_ridge_Alss}{Ridge penalty parameter for regularizing the fixed
regressor inversion (scalar, typically small like 1e-6)}
}
\value{
A list containing:
\itemize{
\item \code{P_lss_matrix}: q_lss x n matrix equal to
(A'A + lambda*I)^(-1) * A'
\item \code{p_lss_vector}: n x 1 vector for intercept projection. If
intercept_col_index_in_Alss is provided, this is the corresponding
row of the Moore-Penrose pseudoinverse of A. Otherwise, a zero vector.
}
}
\description{
Precomputes fixed regression components for efficient Least Squares Separate
(LSS) estimation using the Woodbury matrix identity.
}
\details{
This function implements Component 3, Step 1 of the M-HRF-LSS pipeline.
It precomputes matrices needed for the Woodbury identity-based efficient
computation of single-trial betas. The P_lss matrix projects data onto the
fixed regressor space, while p_lss_vector handles the special case of the
intercept term in the LSS formulation.
}
\examples{
\dontrun{
# Create example fixed regressors
n <- 200  # timepoints

# Intercept + linear drift + motion parameters
A_fixed <- cbind(
  1,                    # intercept
  seq_len(n) / n,       # linear drift
  rnorm(n),             # motion param 1
  rnorm(n)              # motion param 2
)

# Prepare LSS components
lss_components <- prepare_lss_fixed_components_core(
  A_fixed, 
  intercept_col_index_in_Alss = 1,
  lambda_ridge_Alss = 1e-6
)
}

}
