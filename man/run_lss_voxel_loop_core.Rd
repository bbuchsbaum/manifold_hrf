% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/core_lss.R
\name{run_lss_voxel_loop_core}
\alias{run_lss_voxel_loop_core}
\title{Run LSS for All Voxels (Core)}
\usage{
run_lss_voxel_loop_core(
  Y_proj_matrix,
  X_trial_onset_list_of_matrices,
  H_shapes_allvox_matrix,
  A_lss_fixed_matrix,
  P_lss_matrix,
  p_lss_vector,
  ram_heuristic_GB_for_Rt = 1
)
}
\arguments{
\item{Y_proj_matrix}{The n x V projected data matrix, where n is timepoints
and V is number of voxels}

\item{X_trial_onset_list_of_matrices}{A list of T matrices, where each is an
n x p Toeplitz design matrix for a single trial}

\item{H_shapes_allvox_matrix}{The p x V matrix of voxel-specific HRF shapes
from reconstruct_hrf_shapes_core}

\item{A_lss_fixed_matrix}{The n x q_lss matrix of fixed regressors}

\item{P_lss_matrix}{The q_lss x n precomputed projection matrix}

\item{p_lss_vector}{The n x 1 precomputed intercept projection vector}

\item{ram_heuristic_GB_for_Rt}{Memory threshold in GB for precomputing
R_t matrices. If estimated memory usage is below this, precompute all
trial-voxel regressors for efficiency.}
}
\value{
Beta_trial_allvox_matrix A T x V matrix of trial-wise beta estimates
}
\description{
Main loop for Least Squares Separate (LSS) estimation across all voxels,
with optional memory-efficient precomputation of trial regressors.
}
\details{
This function implements Component 3, Step 4 of the M-HRF-LSS pipeline.
It loops over all voxels and computes single-trial betas using the efficient
Woodbury LSS method. When memory permits, it precomputes all trial-specific
regressors (R_t = X_t * H) to avoid redundant calculations. Otherwise, it
computes them on-the-fly for each voxel.
}
\examples{
\dontrun{
# Setup
n <- 200  # timepoints
p <- 30   # HRF length
V <- 100  # voxels
T <- 50   # trials

# Projected data
Y_proj <- matrix(rnorm(n * V), n, V)

# Trial designs
X_trials <- lapply(1:T, function(t) {
  X <- matrix(0, n, p)
  onset <- 10 + (t-1) * 3
  if (onset + p <= n) {
    X[onset:(onset+p-1), ] <- diag(p)
  }
  X
})

# HRF shapes (from previous components)
H_shapes <- matrix(rnorm(p * V), p, V)

# Fixed regressors and precomputed components
A_fixed <- cbind(1, seq_len(n)/n)
lss_prep <- prepare_lss_fixed_components_core(A_fixed, 1, 1e-6)

# Run LSS for all voxels
Beta_trials <- run_lss_voxel_loop_core(
  Y_proj, X_trials, H_shapes, A_fixed,
  lss_prep$P_lss_matrix, lss_prep$p_lss_vector,
  ram_heuristic_GB_for_Rt = 2.0
)
}

}
